import asyncio
import difflib
import logging
import re
from pathlib import Path

from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery

from classes import gemini, chat_gpt
from fsm.states import ChatGPTStates, CelebrityDialog, QuizGame
from keyboards.inline_keyboards import next_step_keyboard
from keyboards.reply_keyboards import kb_random_facts, kb_start, kb_say_goodbye, kb_back
from .command_handlers import com_start, com_menu, start_quiz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

ai_handler = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏ —Å –ø–æ–º–æ—â—å—é pathlib
BASE_PATH = Path(__file__).resolve().parent
IMG_PATH = BASE_PATH.parent / 'resources' / 'images'
PROMPT_PATH = BASE_PATH.parent / 'resources' / 'prompts'


def get_prompt_path(filename: str) -> Path | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.

    """
    prompt_file = PROMPT_PATH / filename
    if prompt_file.exists():
        return prompt_file
    logger.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {prompt_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None


async def handle_ai_response(message: Message, request: list[dict], prompt_file: Path,
                             image_name: str, reply_markup, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.

    """
    caption = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        caption = await chat_gpt.text_request(request, str(prompt_file))
        logger.info(f"üìú –û—Ç–≤–µ—Ç ChatGPT: {caption}")
    except Exception as e:
        logger.warning(f"ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Gemini")

        try:
            # –ï—Å–ª–∏ ChatGPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            caption = await gemini.text_request(request, str(prompt_file))
            logger.info(f"üìú –û—Ç–≤–µ—Ç Gemini: {caption}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    if not caption or caption.strip() == "":
        logger.error("‚ùå AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!")

        error_file = IMG_PATH / "dino.gif"  # –ü—É—Ç—å –∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π
        if error_file.exists():
            await message.answer_animation(
                FSInputFile(error_file),
                caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await asyncio.sleep(1)
        await com_menu(message)
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    photo_file = FSInputFile(IMG_PATH / image_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ—Ç–≤–µ—Ç–æ–º –æ—Ç AI)
    await message.answer_photo(
        photo=photo_file,
        caption=caption,
        reply_markup=reply_markup
    )

    logger.info(f"‚úÖ AI-–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {caption}")

    return caption  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI


@ai_handler.message(F.text.in_({'–•–æ—á—É –µ—â–µ —Ñ–∞–∫—Ç', '–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç'}))
@ai_handler.message(Command('random'))
async def ai_random_fact(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞.

    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
    prompt_file = get_prompt_path('random.txt')

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not prompt_file:
        await message.answer("–û—à–∏–±–∫–∞: –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
    request_message = [{'role': 'user', 'content': message.text}]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é handle_ai_response
    await handle_ai_response(message, request_message, prompt_file, 'random.jpg', kb_random_facts(), state)


@ai_handler.message(ChatGPTStates.wait_for_request)
async def ai_gpt_request(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT.

    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "–ù–∞–∑–∞–¥", –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == '–ù–∞–∑–∞–¥':
        await com_start(message)
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è ChatGPT
    prompt_file = get_prompt_path('gpt.txt')

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if not prompt_file:
        await message.answer("–û—à–∏–±–∫–∞: –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
    request_message = [{'role': 'user', 'content': message.text}]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é handle_ai_response
    await handle_ai_response(message, request_message, prompt_file, 'gpt.jpg', kb_back(), state)


@ai_handler.message(CelebrityDialog.wait_for_answer)
async def celebrity_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.

    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–∞–∑–∞–¥", –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_start())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
        await com_start(message)  # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    prompt_name = data.get('prompt')

    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if not prompt_name:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è", –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
    user_text = '–ü–æ–∫–∞, –≤—Å–µ–≥–æ —Ç–µ–±–µ —Ö–æ—Ä–æ—à–µ–≥–æ!' if message.text == '–ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è' else message.text

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    data['dialog'].append({'role': 'user', 'content': user_text})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º
    prompt_file = get_prompt_path(f"{prompt_name}.txt")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å AI —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é handle_ai_response
    await handle_ai_response(message, data['dialog'], prompt_file, f"{prompt_name}.jpg", kb_say_goodbye(), state)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è", –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == '–ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è':
        await state.clear()
        await asyncio.sleep(1)
        await com_start(message)


@ai_handler.callback_query(F.data.startswith("quiz_"))
async def quiz_get_question(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞.
    """
    topic_key = call.data  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–µ–º—ã –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    logger.info(f"üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ: {topic_key}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—ã—Ö–æ–¥ –∏–∑ –∫–≤–∏–∑–∞
    if topic_key == "quiz_exit":
        user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        score = user_data.get("score", 0)
        await state.clear()
        await call.message.answer(f"üìå –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–≤–∏–∑–∞.\nüèÜ –¢–≤–æ–π —Å—á—ë—Ç: {score}")
        await asyncio.sleep(1)
        await com_start(call.message)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑
    if topic_key == "quiz_new":
        await state.clear()
        await start_quiz(call.message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–µ—â—ë –≤–æ–ø—Ä–æ—Å" (quiz_more), –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    if topic_key == "quiz_more":
        topic_key = user_data.get("topic")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–º—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not topic_key:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞ –∫–≤–∏–∑–∞.")
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Ç–µ–º–∞ (–∞ –Ω–µ "quiz_more"), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç
    if topic_key != "quiz_more":
        await state.update_data(topic=topic_key, score=0)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –∏ –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    try:
        await call.message.edit_text("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    except Exception:
        pass  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–≤–∏–∑–∞
    prompt_file = get_prompt_path("quiz.txt")
    if not prompt_file:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI: –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ –∫–ª—é—á —Ç–µ–º—ã
    request = [{"role": "user", "content": topic_key}]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É AI –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question_text = await handle_ai_response(call.message, request, prompt_file, "quiz.jpg", None, state)

    # –ï—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–æ–ø—Ä–æ—Å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if not question_text:
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(QuizGame.wait_for_answer)
    await state.update_data(last_question=question_text.strip())

    logger.info(f"üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")


@ai_handler.message(StateFilter(QuizGame.wait_for_answer))
async def quiz_correct_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑.

    """

    def normalize_answer(text):

        """
        –ü—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É: —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è,
        –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ—á–Ω—ã–º.

        """

        return re.sub(r"[^\w\s]", "", text).strip().lower() if text else ""

    def is_similar(ans1: str, ans2: str, threshold: float = 0.9) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∏ –ª–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏.
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ SequenceMatcher.

        """
        return difflib.SequenceMatcher(None, ans1, ans2).ratio() >= threshold or ans1 in ans2 or ans2 in ans1

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = normalize_answer(message.text) if message.text else None
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if not user_answer:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç)
    user_data = await state.get_data()
    last_question = user_data.get("last_question")
    score = user_data.get("score", 0)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    prompt_file = get_prompt_path("quiz.txt")
    if not prompt_file:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    request = [{"role": "user", "content": f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {last_question}"}]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É AI –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    correct_answer = await handle_ai_response(message, request, prompt_file, "quiz.jpg", None, state)

    # –ï—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if not correct_answer:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Ö–æ–∂ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if is_similar(user_answer, normalize_answer(correct_answer), 0.9):
        score += 1
        response_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! (+1)\nüèÜ –í–∞—à —Å—á—ë—Ç: {score}"
    else:
        if score > 0:
            score -= 1
            response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! (-1)\nüèÜ –í–∞—à —Å—á—ë—Ç: {score}"
        else:
            response_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! (0)\nüèÜ –í–∞—à —Å—á—ë—Ç: {score}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(score=score)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(response_text, reply_markup=next_step_keyboard())
