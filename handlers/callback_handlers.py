import asyncio
import logging
from pathlib import Path

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile

from fsm.states import CelebrityDialog
from keyboards.callback_date import CelebrityData
from keyboards.reply_keyboards import kb_back

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

callback_router = Router()

# –ü—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º
BASE_PATH = Path(__file__).resolve().parent.parent  # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
IMG_PATH = BASE_PATH / "resources" / "images"  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
PROMPT_PATH = BASE_PATH / "resources" / "prompts"  # –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º—Ç–∞–º–∏


@callback_router.callback_query(CelebrityData.filter())
async def select_celebrity(callback: CallbackQuery, callback_data: CelebrityData, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏."""
    if callback_data.button != "cb":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤—Ä—É—á–Ω—É—é
        return

    await state.set_state(CelebrityDialog.wait_for_answer)
    await state.update_data(
        name=callback_data.name,
        dialog=[],
        prompt=callback_data.file_name,
    )

    photo_path = IMG_PATH / f"{callback_data.file_name}.jpg"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        file_exists = await asyncio.to_thread(photo_path.is_file)

        if not file_exists:
            logger.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {photo_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        photo_file = FSInputFile(str(photo_path))

        await callback.message.answer_photo(
            photo=photo_file,
            caption=f"ü§ñ –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {callback_data.name}!\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–º:",
            reply_markup=kb_back(),
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_path}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
