import os
from collections import namedtuple
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.callback_date import CelebrityData


def ikb_celebrity():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—è–º–∏.

    –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'resources/prompts'.
    –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π.
    """
    Celebrity = namedtuple('Celebrity', ['name', 'file_name'])
    keyboard = InlineKeyboardBuilder()

    prompts_path = os.path.join('resources', 'prompts')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —Å –ø—Ä–æ–º—Ç–∞–º–∏
    if not os.path.exists(prompts_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{prompts_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return keyboard.as_markup()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'talk_'
    file_list = [file for file in os.listdir(prompts_path) if file.startswith('talk_')]

    if not file_list:
        print("‚ùå –û—à–∏–±–∫–∞: –≤ –ø–∞–ø–∫–µ 'prompts' –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤!")
        return keyboard.as_markup()

    celebrity_list = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º—Ç–æ–º
    for file in file_list:
        file_path = os.path.join(prompts_path, file)
        try:
            with open(file_path, 'r', encoding='utf-8') as txt_file:
                lines = txt_file.readlines()

                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º—è –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
                name = next((line.strip() for line in lines if line.strip()), "")

                if not name:
                    print(f"‚ö†Ô∏è –§–∞–π–ª '{file}' –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.")
                    continue

                # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏
                celebrity_list.append(Celebrity(name, file.rsplit('.', 1)[0]))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ '{file}': {e}")
            continue

    if not celebrity_list:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤.")
        return keyboard.as_markup()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for celebrity in celebrity_list:
        keyboard.button(
            text=celebrity.name.split(" - ")[1].split(".")[0].split(",")[0],  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è
            callback_data=CelebrityData(
                button="cb",
                name=celebrity.name.split(" - ")[1].split(".")[0].split(",")[0].replace(":", ""),  # –ë–µ–∑ ":"
                file_name=celebrity.file_name,
            ),
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)
    keyboard.adjust(*[1] * len(celebrity_list))

    return keyboard.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ–º–∞–º–∏ –∫–≤–∏–∑–∞
def quiz_topics_keyboard():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –¥–ª—è –∫–≤–∏–∑–∞.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîπ Python", callback_data="quiz_prog")],
        [InlineKeyboardButton(text="üîπ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="quiz_math")],
        [InlineKeyboardButton(text="üîπ –ë–∏–æ–ª–æ–≥–∏—è", callback_data="quiz_biology")],
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –≤ –∫–≤–∏–∑–µ
def next_step_keyboard():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–≤–∏–∑–µ.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîπ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="quiz_more")],
        [InlineKeyboardButton(text="üîπ –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É", callback_data="quiz_new")],
        [InlineKeyboardButton(text="üîπ –í—ã–π—Ç–∏", callback_data="quiz_exit")],
    ])
